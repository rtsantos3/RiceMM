mcmc_chain <- as.mcmc(df)
geweke_results <- geweke.diag(mcmc_chain, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
print(i,z_score)
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
# Calculate the percentage of converged solutions
fails <- total_valid - length(converged_chains)
percentage_converged <- length(converged_chains) / total_valid * 100
results <- list('converged_chains' = converged_chains,
'unconverged_chains'= unconverged_chains,
'list_fails' = fails,
'percent_converged' = percentage_converged)
return(results)
}
calculate_raftery_stat<- function(df, q=0.025, r=0.005, s=0.95, eps=0.001){
df_mcmc <- as.mcmc(df)
rstat_mcmc <- raftery.diag(df_mcmc, q=q, r=r, s=s, converge.eps = eps)
resmatrix <- rstat_mcmc
return(resmatrix)
}
#Geweke convergence stats
gw <- check_convergence(wt_250_filt)
gw
print(i)
library(coda)
library(dplyr)
library(openxlsx)
#Change WD
load_csv_and_cleanup <- function(filename, tol = 0, remove_rows = 0) {
# Load the CSV file
df <- read.csv(filename)
# Remove columns with a mean below tolerance
mean_values <- colMeans(df)
columns_to_remove <- names(mean_values)[abs(mean_values) < tol]
df <- df[, !(names(df) %in% columns_to_remove)]
# Remove a set number of rows from the top of the table
df <- df[(remove_rows + 1):nrow(df), ]
# Fix the indices
rownames(df) <- NULL
print(dim(df))
return(df)
}
thin = 25000
check_convergence <- function(df, threshold = 1.28) {
#This function uses the Geweke Diagnostic to check which reactions have converged or not.
# Run Geweke diagnostic
mcmc_chain <- as.mcmc(df)
geweke_results <- geweke.diag(mcmc_chain, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
print(i)
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
# Calculate the percentage of converged solutions
fails <- total_valid - length(converged_chains)
percentage_converged <- length(converged_chains) / total_valid * 100
results <- list('converged_chains' = converged_chains,
'unconverged_chains'= unconverged_chains,
'list_fails' = fails,
'percent_converged' = percentage_converged)
return(results)
}
calculate_raftery_stat<- function(df, q=0.025, r=0.005, s=0.95, eps=0.001){
df_mcmc <- as.mcmc(df)
rstat_mcmc <- raftery.diag(df_mcmc, q=q, r=r, s=s, converge.eps = eps)
resmatrix <- rstat_mcmc
return(resmatrix)
}
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
wt_1500_100k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_1500_100kThinning')
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
samples_list = list(wt_250_filt, wt_750_filt)
sample_names = c('wt_250_filt','wt_750_filt')
diag_df <- data_frame()
wb <- createWorkbook()
for(i in 1:3){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
invisible()
geweke_results
library(coda)
library(dplyr)
library(openxlsx)
#Change WD
load_csv_and_cleanup <- function(filename, tol = 0, remove_rows = 0) {
# Load the CSV file
df <- read.csv(filename)
# Remove columns with a mean below tolerance
mean_values <- colMeans(df)
columns_to_remove <- names(mean_values)[abs(mean_values) < tol]
df <- df[, !(names(df) %in% columns_to_remove)]
# Remove a set number of rows from the top of the table
df <- df[(remove_rows + 1):nrow(df), ]
# Fix the indices
rownames(df) <- NULL
print(dim(df))
return(df)
}
thin = 25000
check_convergence <- function(df, threshold = 1.28) {
#This function uses the Geweke Diagnostic to check which reactions have converged or not.
# Run Geweke diagnostic
mcmc_chain <- as.mcmc(df)
geweke_results <- geweke.diag(mcmc_chain, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
print(i)
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
else:
check_convergence <- function(df, threshold = 1.28) {
#This function uses the Geweke Diagnostic to check which reactions have converged or not.
# Run Geweke diagnostic
mcmc_chain <- as.mcmc(df)
geweke_results <- geweke.diag(mcmc_chain, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
print(i)
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
else{
invisible() #Passes if value is NA
}
# Calculate the percentage of converged solutions
fails <- total_valid - length(converged_chains)
percentage_converged <- length(converged_chains) / total_valid * 100
results <- list('converged_chains' = converged_chains,
'unconverged_chains'= unconverged_chains,
'list_fails' = fails,
'percent_converged' = percentage_converged)
return(results)
}
calculate_raftery_stat<- function(df, q=0.025, r=0.005, s=0.95, eps=0.001){
df_mcmc <- as.mcmc(df)
rstat_mcmc <- raftery.diag(df_mcmc, q=q, r=r, s=s, converge.eps = eps)
resmatrix <- rstat_mcmc
return(resmatrix)
}
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
samples_list = list(wt_250_filt, wt_750_filt)
sample_names = c('wt_250_filt','wt_750_filt')
diag_df <- data_frame()
wb <- createWorkbook()
for(i in 1:2){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
for(i in 1:2){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
View(diag_df)
for(i in 1:2){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
wb <- createWorkbook()
for(i in 1:2){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
for(i in 1:2){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
samples_list = list(wt_250_filt, wt_750_filt)
sample_names = c('wt_250_filt','wt_750_filt')
for(i in 1:length(samples_list)){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
wsheet <- addWorksheet(wb, sheetName = sample)
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
samples_list = list(wt_250_filt, wt_750_filt)
sample_names = c('wt_250_filt','wt_750_filt')
diag_df <- data_frame()
for(i in 1:length(samples_list)){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- do.call(rbind, list(diag_df, diag_cols))
#Write resmatrix to workhbook
writeData(wb, wsheet, resmatrix)
}
print(diag_df)
write.csv(diag_df, './converge_stats/diagnostic_stats_filtered_3rd_run.csv')
wt_250_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250filtered_75000T')
wt_750_filt <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750filtered_75000T')
samples_list = list(wt_250_filt, wt_750_filt)
sample_names = c('wt_250_filt','wt_750_filt')
diag_df <- data_frame()
for(i in 1:length(samples_list)){
#Retrieve sample name and df name
sample <- sample_names[i]
df <- as.data.frame(mget(sample))
print(dim(df))
#Raftery diag statistics
resmatrix <- calculate_raftery_stat(df)$resmatrix
resmatrix <- cbind('reaction'=rownames(resmatrix), resmatrix)
Nfails <- as_data_frame(resmatrix) %>% subset(., subset=N>5000) #N sample fail
Ifails <- as_data_frame(resmatrix) %>% subset(., subset=I>5) #Stickiness fail
#Geweke convergence stats
gw <- check_convergence(df)
#Append to the dataframe
diag_cols <- data_frame(sample, 'resmatrix size'=dim(resmatrix)[1], 'Nfails'=dim(Nfails)[1], 'I_fails'=dim(Ifails)[1],'Geweke_fails'=gw$list_fails, 'percent converged (geweke)'=gw$percent_converged)
diag_df <- rbind(diag_df, diag_cols)
}
print(diag_df)
write.csv(diag_df, './converge_stats/diagnostic_stats_filtered_3rd_run.csv')
wt_250_100k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250')
wt_250_35k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250')
library(coda)
library(dplyr)
library(openxlsx)
#Change WD
load_csv_and_cleanup <- function(filename, tol = 0, remove_rows = 0) {
# Load the CSV file
df <- read.csv(filename)
# Remove columns with a mean below tolerance
mean_values <- colMeans(df)
columns_to_remove <- names(mean_values)[abs(mean_values) < tol]
df <- df[, !(names(df) %in% columns_to_remove)]
# Remove a set number of rows from the top of the table
df <- df[(remove_rows + 1):nrow(df), ]
# Fix the indices
rownames(df) <- NULL
print(dim(df))
return(df)
}
thin = 25000
check_convergence <- function(df, threshold = 1.28) {
#This function uses the Geweke Diagnostic to check which reactions have converged or not.
# Run Geweke diagnostic
mcmc_chain <- as.mcmc(df)
geweke_results <- geweke.diag(mcmc_chain, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
else{
invisible() #Passes if value is NA
}
# Calculate the percentage of converged solutions
fails <- total_valid - length(converged_chains)
percentage_converged <- length(converged_chains) / total_valid * 100
results <- list('converged_chains' = converged_chains,
'unconverged_chains'= unconverged_chains,
'list_fails' = fails,
'percent_converged' = percentage_converged)
return(results)
}
calculate_raftery_stat<- function(df, q=0.025, r=0.005, s=0.95, eps=0.001){
df_mcmc <- as.mcmc(df)
rstat_mcmc <- raftery.diag(df_mcmc, q=q, r=r, s=s, converge.eps = eps)
resmatrix <- rstat_mcmc
return(resmatrix)
}
wt_250_35k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250')
wt_250_35k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250.csv')
gw <- check_convergence(wt_250_35k)
gw
wt_250_35k <- load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250.csv', tol=1e-7)
gw <- check_convergence(wt_250_35k)
gw
calculate_raftery_stat(wt_250_35k)
library(openxlsx)
library(coda)
library(dplyr)
library(openxlsx)
#Change WD
load_csv_and_cleanup <- function(filename, tol = 0, remove_rows = 0) {
# Load the CSV file
df <- read.csv(filename)
# Remove columns with a mean below tolerance
mean_values <- colMeans(df)
columns_to_remove <- names(mean_values)[abs(mean_values) < tol]
df <- df[, !(names(df) %in% columns_to_remove)]
# Remove a set number of rows from the top of the table
df <- df[(remove_rows + 1):nrow(df), ]
# Fix the indices
rownames(df) <- NULL
print(dim(df))
return(df)
}
thin = 25000
check_convergence <- function(df, threshold = 1.28) {
#This function uses the Geweke Diagnostic to check which reactions have converged or not.
# Run Geweke diagnostic
geweke_results <- geweke.diag(df, frac1 = 0.1, frac2 = 0.5)$z
#
converged_chains <- character()
unconverged_chains <- character()
total_valid <- 0
# Check absolute values against the threshold and store the names of converged chains
for (i in seq_along(geweke_results)) {
z_score <- abs(geweke_results[i])
if (!is.na(z_score)) {
total_valid <- total_valid + 1
if (z_score > threshold) {
converged_chains <- c(converged_chains, names(df)[i])
}
else{
unconverged_chains <- c(unconverged_chains, names(df)[i])
}
else{
invisible() #Passes if value is NA
}
# Calculate the percentage of converged solutions
fails <- total_valid - length(converged_chains)
percentage_converged <- length(converged_chains) / total_valid * 100
results <- list('converged_chains' = converged_chains,
'unconverged_chains'= unconverged_chains,
'list_fails' = fails,
'percent_converged' = percentage_converged)
return(results)
}
calculate_raftery_stat<- function(df, q=0.025, r=0.005, s=0.95, eps=0.001){
df_mcmc <- as.mcmc(df)
rstat_mcmc <- raftery.diag(df_mcmc, q=q, r=r, s=s, converge.eps = eps)
resmatrix <- rstat_mcmc
return(resmatrix)
}
#THis script is for the final iteration of the flux sampling attempt
wt_250 = load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_250_Relaxed_loopless_FVA_100kT.csv')
wt_750 = load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_750_Relaxed_loopless_FVA_100kT.csv')
wt_1500 = load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_WT_1500_Relaxed_loopless_FVA_100kT.csv')
tr_250 = load_csv_and_cleanup('../../flux_results/flux_sampling/flux_sample_TR_250_Relaxed_loopless_FVA_100kT.csv')
